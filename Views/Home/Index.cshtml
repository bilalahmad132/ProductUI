@{
    ViewData["Title"] = "Home Page";
}

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEJ6vFf7PflmYp9SCO0mxm3tU8GoYvJ1jUFE7Q9je6xzMwVqVqFdmEL4Di6+H" crossorigin="anonymous">
    <style>
        /* Custom styles for your page */
        body {
            background-color: #f8f9fa;
            font-family: 'Arial', sans-serif;
        }

        .modal-content {
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #004085;
            }

        .table {
            border-radius: 10px;
            overflow: hidden;
        }

            .table thead {
                background-color: #343a40;
                color: white;
            }

            .table tbody tr:hover {
                background-color: #f1f1f1;
                cursor: pointer;
            }

        .table-bordered td, .table-bordered th {
            border: 1px solid #dee2e6;
        }

        .modal-header {
            background-color: #f1f1f1;
            border-bottom: 1px solid #dee2e6;
        }

        .modal-body {
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
        }

        h1 {
            font-size: 2.5rem;
            color: #495057;
            font-weight: 600;
        }

        .role-section {
            display: none;
        }

            .role-section h3 {
                font-size: 1.25rem;
                margin-bottom: 10px;
            }

            .role-section p {
                font-size: 1rem;
                color: #495057;
            }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

            .btn-danger:hover {
                background-color: #c82333;
                border-color: #bd2130;
            }

        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
        }

            .btn-warning:hover {
                background-color: #e0a800;
                border-color: #d39e00;
            }

        .modal-dialog {
            max-width: 600px;
        }

        /* Enhance card-like appearance for the table */
        .table-container {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-top: 30px;
        }

            .table-container h2 {
                font-size: 1.8rem;
                margin-bottom: 15px;
            }


        .modal-body {
            padding: 1rem;
        }

        .table {
            font-size: 0.9rem;
        }

        }
    </style>
</head>

<div class="container mt-5">
    <h1 class="text-center mb-4">@ViewData["Title"]</h1>

    <!-- User Role Section -->
    <div class="role-section">
        <h3>User Role</h3>
        <p id="userRole">Loading...</p> <!-- Will be updated with user role -->
        <h3>User Token</h3>
        <p id="userToken">Loading...</p> <!-- Will be updated with user token -->
        <h3>Decoded Token Data</h3>
        <pre id="decodedTokenData">Loading...</pre> <!-- Will be updated with decoded token data -->
    </div>

    <!-- Show Create Button only for Admin Role -->
    <div class="text-center">
        <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#createProductModal" id="createProductBtn" style="display:none;">Create New Product</button>
        <button id="getAllOrdersBtn" class="btn btn-info mb-3" style="display:none;">Get All Orders</button>
        <button id="sendEmailBtn" class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#sendEmailModal" style="display:none;">Send Email</button>
    </div>

    <div class="table-container">
        <h2 class="text-center">Product List</h2>
        <table id="productsTable" class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>


<div class="modal fade" id="createProductModal" tabindex="-1" aria-labelledby="createProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createProductModalLabel">Create New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createProductForm">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" required>
                    </div>
                    <div class="mb-3">
                        <label for="productDesc" class="form-label">Product Description</label>
                        <textarea class="form-control" id="productDesc" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="productPrice" class="form-label">Product Price</label>
                        <input type="number" class="form-control" id="productPrice" step="0.01" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Product</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Modal for creating a new email -->
<div class="modal fade" id="sendEmailModal" tabindex="-1" aria-labelledby="sendEmailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sendEmailModalLabel">Send Email</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="sendEmailForm">
                    <div class="mb-3">
                        <label for="recipientEmail" class="form-label">Recipient Email</label>
                        <input type="email" class="form-control" id="recipientEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="emailSubject" class="form-label">Subject</label>
                        <input type="text" class="form-control" id="emailSubject" required>
                    </div>
                    <div class="mb-3">
                        <label for="emailBody" class="form-label">Message</label>
                        <textarea class="form-control" id="emailBody" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Send Email</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pzjw8f+ua7Kw1TIq0m5eM6XhKDeSLO2Bl79Vu8EIb8BAmzmd7nU1qxjz78JfVajG" crossorigin="anonymous"></script>

<script>
    let productToEdit = null;
    let userRole = null;

    function getBearerToken() {
        const name = 'token=';
        const decodedCookie = decodeURIComponent(document.cookie);
        const ca = decodedCookie.split(';');

        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) === 0) {
                return c.substring(name.length, c.length);
            }
        }
        return null;
    }


           document.getElementById('createProductForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission

        const productName = document.getElementById('productName').value;
        const productDesc = document.getElementById('productDesc').value;
        const productPrice = document.getElementById('productPrice').value;
        const token = getBearerToken();

        if (productName && productDesc && productPrice && token) {
            // If productToEdit is not null, we are editing an existing product
            const apiUrl = productToEdit ? `https://localhost:7094/api/items/update/${productToEdit}` : 'https://localhost:7094/api/items/create';
            const method = productToEdit ? 'PUT' : 'POST'; // Use PUT for updating, POST for creating

            fetch(apiUrl, {
                method: method,
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: productName,
                    desc: productDesc,
                    price: productPrice
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(productToEdit ? 'Product updated successfully!' : 'Product created successfully!');
                    fetchProducts(); // Refresh the product list

                    // Close the modal
                    const modalElement = document.getElementById('createProductModal');
                    const modalInstance = bootstrap.Modal.getInstance(modalElement); // Get the Bootstrap modal instance
                    if (modalInstance) {
                        modalInstance.hide(); // Hide the modal
                    }

                    document.getElementById('createProductForm').reset(); // Reset the form
                    productToEdit = null; // Reset the productToEdit variable
                } else {
                    alert('Error saving product');
                }
            })
            .catch(error => console.error('Error:', error));
        } else {
            alert('Please fill in all fields');
        }
    });


        document.getElementById('sendEmailForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission

        const recipientEmail = document.getElementById('recipientEmail').value;
        const emailSubject = document.getElementById('emailSubject').value;
        const emailBody = document.getElementById('emailBody').value;

        if (recipientEmail && emailSubject && emailBody) {
            // Send the email via the API
            fetch('https://localhost:7094/api/Email/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    recipient: recipientEmail,
                    subject: emailSubject,
                    body: emailBody
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Email sent successfully.') { // Check for 'message' in response
                        alert('Email sent successfully!');

                        // Close the modal
                        const modalElement = document.getElementById('sendEmailModal');
                        const modalInstance = bootstrap.Modal.getInstance(modalElement); // Get the existing modal instance
                        if (modalInstance) {
                            modalInstance.hide(); // Close the modal
                        }

                        // Reset the form
                        document.getElementById('sendEmailForm').reset();
                    } else {
                        alert('Error sending email');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('There was an error with the request');
                });
        } else {
            alert('Please fill in all fields');
        }
    });


    function getUserRole() {
        const token = getBearerToken();
        if (token) {
            try {
                // Decode the JWT token
                const payload = JSON.parse(atob(token.split('.')[1])); // Decodes the JWT token

                console.log("Decoded Token Payload:", payload); // Log the decoded token to inspect its structure

                // Access the role from the correct claim path
                userRole = payload["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"]; // Correct path to role

                if (userRole) {
                    // Display the role in the 'userRole' element
                    document.getElementById('userRole').innerText = `Role: ${userRole}`;

                    // Show the "Create New Product" button and enable editing for Admin role
                    if (userRole.toLowerCase() === 'admin') {
                        document.getElementById('createProductBtn').style.display = 'block';
                        document.getElementById('getAllOrdersBtn').style.display = 'block';
                        document.getElementById('sendEmailBtn').style.display = 'block';

                        enableEditingForAdmin();
                    } else {
                        document.getElementById('createProductBtn').style.display = 'none';
                        document.getElementById('getAllOrdersBtn').style.display = 'none';
                        document.getElementById('sendEmailBtn').style.display = 'none';

                    }
                } else {
                    console.error('Role not found in the token');
                    document.getElementById('userRole').innerText = 'Role: Not available';
                }

                // Display the token in the 'userToken' element
                document.getElementById('userToken').innerText = `Token: ${token}`;

                // Display all decoded token data in 'decodedTokenData' element
                document.getElementById('decodedTokenData').innerText = JSON.stringify(payload, null, 2);
            } catch (error) {
                console.error('Error decoding token:', error);
                document.getElementById('userRole').innerText = 'Role: Error decoding token';
                document.getElementById('userToken').innerText = 'Token: Error decoding token';
                document.getElementById('decodedTokenData').innerText = 'Decoded Token Data: Error decoding token';
            }
        } else {
            console.error('No token found');
            document.getElementById('userRole').innerText = 'Role: No token found';
            document.getElementById('userToken').innerText = 'Token: No token found';
            document.getElementById('decodedTokenData').innerText = 'Decoded Token Data: No token found';
        }
    }

        function renderProducts(data) {
        const tableBody = document.querySelector('#productsTable tbody');
        tableBody.innerHTML = '';
        data.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.id}</td>
                <td>${item.name}</td>
                <td>${item.desc}</td>
                <td>${item.price}</td>
                <td>
                    ${userRole && userRole.toLowerCase() === 'admin' ? `
                        <button class="btn btn-warning btn-sm edit-btn" data-id="${item.id}" data-name="${item.name}" data-desc="${item.desc}" data-price="${item.price}">Edit</button>
                        <button class="btn btn-danger btn-sm delete-btn" data-id="${item.id}">Delete</button>
                    ` : ''}
                    ${userRole && userRole.toLowerCase() !== 'admin' ? `
                        <button class="btn btn-success btn-sm buy-btn" data-id="${item.id}" data-name="${item.name}" data-desc="${item.desc}" data-price="${item.price}">Buy</button>
                    ` : ''}
                </td>
            `;
            tableBody.appendChild(row);
        });

        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', editProduct);
        });
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', openDeleteModal);
        });
        document.querySelectorAll('.buy-btn').forEach(button => {
            button.addEventListener('click', buyProduct);
        });
    }

    function buyProduct(event) {
        const productName = event.target.dataset.name;
        const productDesc = event.target.dataset.desc;
        const productPrice = event.target.dataset.price;
        const productId = event.target.dataset.id;  // Assuming the item has a data-id attribute

        // Construct the URL with query parameters, including productId
        const placeOrderUrl = `/Home/PlaceOrder?productName=${encodeURIComponent(productName)}&productDesc=${encodeURIComponent(productDesc)}&productPrice=${encodeURIComponent(productPrice)}&productId=${encodeURIComponent(productId)}`;

        // Redirect the user to the PlaceOrder page with the data in the query string
        window.location.href = placeOrderUrl;
    }

    function fetchProducts() {
        const token = getBearerToken();
        if (token) {
            fetch('https://localhost:7094/api/items/get', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && Array.isArray(data.extraData)) {
                    renderProducts(data.extraData);
                }
            })
            .catch(error => console.error("Fetch error:", error));
        }
    }

    function editProduct(event) {
        const productId = event.target.dataset.id;
        const productName = event.target.dataset.name;
        const productDesc = event.target.dataset.desc;
        const productPrice = event.target.dataset.price;

        // Pre-fill the form with the existing product data
        document.getElementById('productName').value = productName;
        document.getElementById('productDesc').value = productDesc;
        document.getElementById('productPrice').value = productPrice;
        productToEdit = productId; // Store the product ID for later use

        // Show the modal for editing
        const modal = new bootstrap.Modal(document.getElementById('createProductModal'));
        modal.show();
    }

    function openDeleteModal(event) {
        const productId = event.target.dataset.id;
        // Open modal and confirm delete product with 'productId'
        if (confirm('Are you sure you want to delete this product?')) {
            deleteProduct(productId);
        }
    }

    function deleteProduct(productId) {
        const token = getBearerToken();
        if (token) {
            fetch(`https://localhost:7094/api/items/delete/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Product deleted successfully');
                    fetchProducts(); // Refresh the product list
                } else {
                    alert('Error deleting product');
                }
            })
            .catch(error => console.error("Delete error:", error));
        }
    }


        document.getElementById('getAllOrdersBtn').addEventListener('click', function() {
        const token = getBearerToken();

        if (token) {
            fetch('/Home/GetAllOrders', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.href = '/Home/GetAllOrders'; // Trigger the download of the file
                } else {
                    alert("Failed to fetch orders.");
                }
            })
            .catch(error => console.error("Error:", error));
        }
    });


    // Initialize page
    window.onload = () => {
        getUserRole();
        fetchProducts(); // Fetch products for display
    };
</script>
